#!/usr/bin/env python

try:
    from six import *
except:
    pass


import logging
import optparse
import grp
import os
import sys
from samweb_client import *
from fife_sam_utils import update_dcache_tape_location, fake_project_dataset, log_startup, log_finish

#def update_dcache_tape_location(sp, f):

ff = fake_project_dataset("f")

def find_dcache_path(f):
    dlocs = ff.get_paths_for(f)
    logging.debug("getting locations for %s found %s" % (f, repr(dlocs)))
    dlocs = [x for x in dlocs if x.find('/pnfs/')== 0 and x.find('/scratch') < 0]
    dlocs.sort(reverse=True)

    logging.debug("getting locations for %s pruned to %s" % (f, repr(dlocs)))
    if dlocs:
        return dlocs[0]
    else:
        return None

def main():
    log_startup()
    experiment = os.environ.get(
        "EXPERIMENT", os.environ.get(
            "SAM_EXPERIMENT", 
            grp.getgrgid(os.getgid())[0]
        )
    )
    parser = optparse.OptionParser( 
        usage = "look up tape locations of files in DCache and add them to SAM"
    )
    parser.add_option(
        "-e",
        "--experiment",
        default=experiment,
        help="use this experiment server defaults to $SAM_EXPERIMENT if not set"
,
    )
    parser.add_option("-v", "--verbose", action="count", default=0)

    (o,a) = parser.parse_args()

    if o.verbose > 1:
        logging.basicConfig(level=logging.DEBUG)
    elif o.verbose > 0:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.disable(logging.INFO)

    if not a:
        parser.error("expected filename(s) containing a list(s) of files")
        exit(1)

    samweb = SAMWebClient(experiment=experiment)

    for fn in a:
        fd = open(fn,"r")
        for fn in fd.readlines():
            fn = fn.strip()
            if fn.find("/") < 0:
                fn = find_dcache_path(fn)
            if fn:
                update_dcache_tape_location(
                   os.path.dirname(fn), os.path.basename(fn), samweb
                )
        fd.close()
    log_finish("Success")

if __name__ == '__main__':
   main()
