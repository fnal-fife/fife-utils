#!/usr/bin/env python

from fife_sam_utils import *
import hashlib 
import sys
import os
from samweb_client import *
import socket


def zerodeep(f):
    return '/'

def onedeep(f):
    h = hashlib.md5(f).hexdigest()
    return "/%s/" % h[0:4]

def twodeep(f):
    h = hashlib.md5(f).hexdigest()
    return "/%s/%s/" % (h[0:4], h[4:8])

notmade = {}
def dodir(ih, dir):
    
    if dir.startswith("/pnfs/") or dir.startswith("/%s/"%os.environ.get('EXPERIMENT','')):
        return

    for d in (dirname(dir), dir):
        if notmade.get(d,True):
           notmade[d] = False
           try:
               print "doing mkdir " , d
               ih.mkdir(d, '')
           except:
               pass

def clone( d, dest, subdirf, just_say=False ):
    # make gridftp tool add directories
    os.environ['IFDH_GRIDFTP_EXTRA'] = '-cd'
    cpargs = []
    for f in d.file_iterator():
        l = d.ifdh_handle.locateFile(f, "gsiftp")
        if len(l) > 0:
            cpargs.append(l[0])
	    cpargs.append(dest + subdirf(f) + f)
            cpargs.append(';')
            dodir(d.ifdh_handle, dest+subdirf(f))
        else:
            print "Notice: skipping file %s, no locations" % f

    # above loop leaves a trailng ';', which confuses things.
    cpargs = cpargs[:-1]

    if just_say:
        print "I would 'ifdh cp %s'" % cpargs
	for f in d.file_iterator():
            print "I would declare location for %s of %s" % (f, dest+subdirf(f))
    else: 
        samweb = SAMWebClient()
	d.ifdh_handle.cp(cpargs)
	for f in d.file_iterator():
	    samweb.addFileLocation(f, samprefix(dest) + dest + subdirf(f))

def usage(argv):
    print argv[0], ": usage: ",
    print argv[0], '[opts] dataset_name1  destination'
    print "	-- copy files in dataset to destination"
    print " options: "
    print "  -0 : make 0 levels of hash directories"
    print "  -1 : make 1 levels of hash directories"
    print "  -2 : make 2 levels of hash directories (default)"

if __name__ == '__main__':
    
    dirfunc = twodeep
    just_say = False
    cmd = sys.argv[0]

    while len(sys.argv) > 1 and sys.argv[1][0] == "-":

      if  sys.argv[1] == "-h":
        usage(sys.argv)
        exit(0)

      if  sys.argv[1] == "-n":
        just_say = True
        sys.argv = sys.argv[1:]
        sys.argv[0] = cmd
        continue


      if sys.argv[1] == "-0":
        dirfunc = zerodeep
        sys.argv = sys.argv[1:]
        sys.argv[0] = cmd
        continue

      if sys.argv[1] == "-1":
        dirfunc = twodeep
        sys.argv = sys.argv[1:]
        sys.argv[0] = cmd
        continue

      if sys.argv[1] == "-2":
        dirfunc = twodeep
        sys.argv = sys.argv[1:]
        sys.argv[0] = cmd
        continue

      print "unknown option %s" % sys.argv[1]
      usage(sys.argv)
      exit(1)
      

    if len(sys.argv) < 3:
        usage(sys.argv)
        exit(1)

    src = sys.argv[1]
    dst = sys.argv[2]

    clone(dataset(src), dst, dirfunc, just_say)
