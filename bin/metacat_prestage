#!/usr/bin/env python3

import os
import sys
import threading 
from data_dispatcher.api import DataDispatcherClient
from metacat.webapi import MetaCatClient
import metacat.common.exceptions
import ifdh
import time
import requests

ddisp = DataDispatcherClient()
mcc = MetaCatClient()
ih = ifdh.ifdh()
last_reauth = 0

def get_token(verbose):
    os.environ["IFDH_TOKEN_ENABLE"] = "1"
    tokenf = ih.getToken()
    if verbose > 0:
        sys.stderr.write("got token: %s\n" % tokenf)
    with open(tokenf, "rb") as tf:
         return tf.read().strip()

def reauth():
    if time.time() - last_reauth < 3600:
        return
    last_reauth = time.time
    tokenbits = get_token(verbose)
    ddisp.login_token(os.environ.get("USER"), tokenbits)
    mcc.login_token(os.environ.get("USER"), tokenbits)
    last_reauth = time.time()

def next_file_loop_thread(projid,  touch, token, verbose):

    reauth()
    l = threading.local()
    l.wid = ddisp.new_worker_id()
    if verbose > 0:
        sys.stderr.write("starting thread: worker id {}\n".format(l.wid))
        sys.stderr.write("calling next_file({0}, {1})\n".format(projid, l.wid))
   
    try:
        l.info = ddisp.next_file(projid, l.wid)
        
        while( isinstance( l.info, dict) ):
            reauth()
            if verbose > 0:
                sys.stderr.write(repr(l.info) + "\n")

            l.fid = "%s:%s"%(l.info["namespace"],l.info["name"])

            replicas = l.info.get("replicas",{})
            if touch and replicas:
                for rse in replicas:
                    requests.get(
                        replicas[rse]["url"].replace("davs:","https:"), 
                        headers={
                           'Range': 'bytes=1-4',
                           'Accept': '*/*',
                           'Authorization': 'Bearer %s' % token
                         },
                         verify="/etc/grid-security/certificates",
                    )
                    if verbose > 1:
                         sys.stderr.write(f"Touched {replicas[rse]['url']}\n")

            ddisp.file_done(projid, l.fid)
            l.info = ddisp.next_file(projid, l.wid)
    except metacat.common.exceptions.WebAPIError:
        pass

def ddisp_prestage_files(did: str, nparallel: int=1, touch=False, verbose:int=0)->None:


    if verbose > 0:
        sys.stderr.write("starting prestage of {0}:\n".format(did))
    flist = mcc.get_dataset_files(did)
    proj = ddisp.create_project(files=flist)
    projid = proj['project_id']
    threads = []
    for i in range(nparallel):
        th = threading.Thread(target=next_file_loop_thread, args=[projid, touch, tokenbits, verbose])
        th.start()
        threads.append(th)
    time.sleep(5)
    for th in threads:
        th.join()

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--did", required=True, help="dataset scope:name string")
    parser.add_argument("-e", "--experiment", help="Experiment name", default=os.environ.get("EXPERIMENT",""))
    parser.add_argument("--parallel", type=int, default=1, help="number of parallel threads to stage (default 1)")
    parser.add_argument("--touch", action='store_true', help="read beginning of files to update usage", default=False)
    parser.add_argument("--verbose", type=int, default=0,  help="verbosity")
    args = parser.parse_args()

    os.environ["EXPERIMENT"] = args.experiment
    ddisp_prestage_files(args.did, args.parallel, args.touch, args.verbose)
    

if __name__ == "__main__":
    main()
