#!/usr/bin/env python
try:
    from six import *
except:
    pass


import grp
import ifdh
import logging
import optparse
import os
import os.path
import sys

from fife_sam_utils import (
    clone,
    zerodeep,
    onedeep,
    twodeep,
    threedeep,
    fourdeep,
    doublesha256,
    unclone,
    dataset,
    fake_project_dataset,
    fake_file_dataset,
    get_standard_certificate_path,
    validate,
)
from fife_sam_utils import log_startup, log_finish


def check_dest(dest, default_dest):
    destp = os.path.dirname(dest)

    h = ifdh.ifdh()
    for d in [destp, dest]:
        res = h.ls(d, 1, "")
        if len(res) == 0:
            try:
                h.mkdir(d, "")
            except:
                pass
        res = h.ls(d, 1, "")
        if len(res) == 0:
            if default_dest == dest:
                if dest.find("none") > 0:

                    sys.stderr.write(
                        "\nERROR: no destination specified to " + sys.argv[0]
                    )
                else:
                    sys.stderr.write(
                        "\nERROR: Cannot find or create %s:\n-- please contect servicedesk to request it be made"
                        % d
                    )
            else:
                sys.stderr.write(
                    "\nERROR: Cannot find or create %s:\n-- please check spelling, permissions, etc"
                    % d
                )

            exit(1)


if __name__ == "__main__":

    log_startup()
    if sys.argv[0].find("persistent") > 0:
        type = "persistent"
        sdir = ""
        clean_others = True
    elif sys.argv[0].find("scratch") > 0:
        type = "scratch"
        sdir = ""
        clean_others = False
    elif sys.argv[0].find("archive") > 0:
        type = "archive"
        sdir = "/data"
        clean_others = True
    else:
        # plain sam_move_dataset
        type = "none"
        sdir = ""
        clean_others = True

    if type == "none":
        parser = optparse.OptionParser(
            usage="usage: %prog [options] \n copy files in named dataset to given destination, declare, and clean out other locations.\n  (Use %prog --help for full options list)"
        )
    else:
        parser = optparse.OptionParser(
            usage="usage: %%prog [options] \n copy files in named dataset to %s and declare%s.\n  (Use %%prog --help for full options list)"
            % (type, " and clean out other locations " if clean_others else "")
        )
    experiment = os.environ.get(
        "EXPERIMENT", os.environ.get("SAM_EXPERIMENT", grp.getgrgid(os.getgid())[0])
    )

    parser.set_defaults(dirfunc=fourdeep, experiment=experiment)
    parser.add_option("-v", "--verbose", action="count", default=0)
    parser.add_option(
        "-j",
        "--just_say",
        action="store_true",
        help="do not actually copy, just say what you would do",
    )
    parser.add_option(
        "--no_project",
        action="store_true",
        default=False,
        help="do not use a SAM project for files",
    )
    parser.add_option(
        "-e",
        "--experiment",
        default=experiment,
        help="use this experiment server defaults to $SAM_EXPERIMENT if not set",
    )
    parser.add_option(
        "-b",
        "--batch_size",
        default=1,
        type="int",
        help="copy then declare in batches of this size",
    )
    parser.add_option("-n", "--name", help="dataset name to copy")
    parser.add_option("-f", "--file", help="file name to copy")
    parser.add_option("-N", "--ncopies", help="number of copy threads", default=3)
    parser.add_option(
        "-p",
        "--prune",
        action="store_true",
        help="prune locations we cannot reach before copying",
    )
    parser.add_option(
        "-P",
        "--paranoid",
        action="store_const",
        const=True,
        default=False,
        help="Do not believe copy status, check for existence before declaring a location",
    )
    parser.add_option("-k", "--keep", help="keep existing copies", action="store_true")
    parser.add_option(
        "--getawscreds",
        action="store_true",
        help="get AWS S3 credentials from /pnfs file",
        default=False,
    )
    parser.add_option(
        "--intermed",
        action="store_true",
        help="use intermediate file and not pipe",
        default=False,
    )
    parser.add_option("--setup", help="set up products", default=None)

    parser.add_option(
        "-0",
        "--zerodeep",
        dest="dirfunc",
        action="store_const",
        const=zerodeep,
        help="make no subdirectories in destination",
    )
    parser.add_option(
        "-1",
        "--onedeep",
        dest="dirfunc",
        action="store_const",
        const=onedeep,
        help="make hash subdirectories one deep in destination with md5",
    )
    parser.add_option(
        "-2",
        "--twodeep",
        dest="dirfunc",
        action="store_const",
        const=twodeep,
        help="make hash subdirectories two deep in destination with md5",
    )
    parser.add_option(
        "-3",
        "--threedeep",
        dest="dirfunc",
        action="store_const",
        const=threedeep,
        help="make hash subdirectories two deep in destination with md5",
    )
    parser.add_option(
        "-4",
        "--fourdeep",
        dest="dirfunc",
        action="store_const",
        const=fourdeep,
        help="make hash subdirectories two deep in destination with md5",
    )
    parser.add_option(
        "--doublesha256",
        dest="dirfunc",
        action="store_const",
        const=doublesha256,
        help="make hash subdirectories two deep in destination with 2-digit sha256",
    )


    #
    # rough guess at dest, for usage message..
    #
    dest = "/pnfs/%s/%s/sam_managed_users/%s%s" % (
        "$EXPERIMENT",
        type,
        os.environ.get("USER", os.environ.get("GRID_USER")),
        sdir,
    )

    if type == "none":
        parser.add_option("-d", "--dest", help="destination to move to")
    else:
        parser.add_option(
            "-d",
            "--dest",
            help="override destination to archive to, default is %s" % dest,
        )

    (o, a) = parser.parse_args()

    if o.verbose > 1:
        logging.basicConfig(level=logging.DEBUG)
    elif o.verbose > 0:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.disable(logging.INFO)

    if o.setup:
        do_setup(o.setup)

    if o.experiment:
        os.environ["EXPERIMENT"] = o.experiment
        os.environ["SAM_EXPERIMENT"] = o.experiment
        os.environ["IFDH_BASE_URI"] = (
            "http://samweb.fnal.gov:8480/sam/%s/api" % o.experiment
        )
    else:
        sys.stderr.write(
            "Error: Need either --experiment or $EXPERIMENT $SAM_EXPERIMENT in environment"
        )
        sys.exit(1)

    cert = get_standard_certificate_path(o)
    os.environ["X509_USER_PROXY"] = cert

    if o.experiment == "samdev":
        edir = "fermilab"
    else:
        edir = o.experiment

    dest = "/pnfs/%s/%s/sam_managed_users/%s%s" % (
        edir,
        type,
        os.environ.get("USER", os.environ.get("GRID_USER")),
        sdir,
    )

    if not o.dest:
        o.dest = dest

    if not o.name and not o.file:
        parser.error("expected --name dataset-name or --file filename")
        exit(1)

    if o.verbose > 1:
        logging.basicConfig(level=logging.DEBUG)
    elif o.verbose > 0:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.disable(logging.INFO)

    if o.keep:
        clean_others = False

    check_dest(o.dest, dest)

    if o.name:
        if o.no_project:
            d = fake_project_dataset(o.name)
            # fake_project_dataset can't coordinate multiple copiers...
            o.ncopies = 1
        else:
            d = dataset(o.name)

    if o.file:
        d = fake_file_dataset(o.file)

    clone(
        d,
        o.dest,
        subdirf=o.dirfunc,
        just_say=o.just_say,
        batch_size=o.batch_size,
        verbose=o.verbose,
        experiment=o.experiment,
        ncopies=o.ncopies,
        paranoid=o.paranoid,
        getawscreds=o.getawscreds,
        intermed=o.intermed,
    )

    validate(d, prune=o.prune, verbose=o.verbose)

    if clean_others:
        d.flush()  # forget what you thought you knew about locations, etc.
        unclone(
            d,
            delete_match="(?![a-z]*:*%s/)" % o.dest,
            verbose=o.verbose,
            experiment=o.experiment,
        )

    log_finish("Success")
