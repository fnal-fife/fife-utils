#!/usr/bin/env python3

import os
import sys
import threading 
from data_dispatcher.api import DataDispatcherClient
from metacat.webapi import MetaCatClient
import ifdh

ddisp = DataDispatcherClient()
metacat = MetaCatClient()
ih = ifdh.ifdh()

def get_token():
    os.environ["IFDH_TOKEN_ENABLE"] = "1"
    tokenf = ih.getToken()
    with open(tokenf, "rb") as tf:
         return tf.read().strip()


def next_file_loop_thread(projid, verbose):
    l = threading.local()
    l.wid = ddisp.new_worker_id()
    if verbose > 0:
        sys.stderr.write("starting thread: worker id {}\n".format(l.wid))
    l.fid = ddisp.next_file(projid, l.wid)
    if verbose > 0:
        sys.stderr.write(l.fid + "\n")
    while( l.fid ):
        file_done(projid,l.did)
        l.fid = ddisp.next_file(projid, l.wid)
        if verbose > 0:
            sys.stderr.write(l.fid + "\n")

def ddisp_prestage_files(did: str, nparallel: int=1, verbose:int=0)->None:

    tokenbits = get_token()
    ddisp.login_token(os.environ.get("USER"), tokenbits)
    metacat.login_token(os.environ.get("USER"), tokenbits)

    if verbose > 0:
        sys.stderr.write("starting prestage of {0}:\n".format(did))
    flist = metacat.get_dataset_files(did)
    proj = ddisp.create_project(files=flist)
    projid = proj['project_id']
    threads = []
    for i in range(nparallel):
        threads.append(threading.Thread(target=next_file_loop_thread, args=[projid, verbose]))
        threads[i].start()
    for i in range(nparallel):
        threads[i].join()

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-e", "--experiment", help="Experiment name", default=os.environ.get("EXPERIMENT",""))
    parser.add_argument("--did", required=True, help="dataset scope:name string")
    parser.add_argument("--parallel", type=int, default=1, help="number of parallel threads to stage")
    parser.add_argument("--verbose", type=int, default=0,  help="verbosity")
    args = parser.parse_args()

    os.environ["EXPERIMENT"] = args.experiment
    ddisp_prestage_files(args.did, args.parallel, args.verbose)
    

if __name__ == "__main__":
    main()
