#!/usr/bin/env python

from samweb_client import *
from fife_sam_utils import *
import sys
import os
import grp
import optparse
from fife_sam_utils import log_startup, log_finish


def audit( ds, dest,  verbose = False, experiment = None, keeplists=None ):
    samweb = SAMWebClient(experiment=experiment)
    res=0

    num_in_dataset = 0
    num_declared_at_dest = 0
    num_present_declared_at_dest = 0
    num_undeclared_at_dest = 0
    num_present_undeclared_at_dest = 0
    num_present_wrong_loc = 0
    num_no_locations = 0
    
    if keeplists != None:
        if not os.path.exists(keeplists):
            os.mkdir(keeplists)

    full_list = ds.ifdh_handle.ls(dest,10,'')
    full_list = ds.normalize_list(full_list)
    full_set = set(full_list)
    fnames = [os.path.basename(x) for x in full_list]
    fnameset = set(fnames)

    if keeplists != None:
        lslist=open("%s/ls_lR_out"%keeplists,"w")
        for f in full_list:
            lslist.write(f+"\n")
        lslist.close()
        lsfiles=open("%s/ls_basenames"%keeplists,"w")
        for f in fnameset:
            lsfiles.write(f+"\n")
        lsfiles.close()
        flistf=open("%s/files_in_dataset"%keeplists,"w")
        loclist=open("%s/dataset_locations_matching"%keeplists,"w")
        misslist=open("%s/dataset_files_missing"%keeplists, "w")
        wronglist=open("%s/dataset_files_misfiled"%keeplists, "w")

    for f in ds.file_iterator():
        if keeplists != None:
            flistf.write(f+"\n")
        num_in_dataset += 1
        spl = ds.get_paths_for(f)
        spl = ds.normalize_list(spl)
        found = 0
        for sp in spl:
            #print "checking %s startswith %s" % (sp, dest)
            if sp.startswith(dest):
                if keeplists != None:
                    loclist.write(sp+"\n")
                found = 1
                num_declared_at_dest += 1
                if  sp in full_set:
                    num_present_declared_at_dest += 1
                    if verbose: print "located: %s" % sp
                else:
                    if f in fnameset:
                        num_present_wrong_loc += 1
                        for pp in full_list:
                            if pp.find(f):
                                if keeplists != None:
                                    wronglist.write("wrong path: %s at %s not %s" % ( f, pp, sp))
                                if verbose: print "wrong path: %s at %s not %s" % ( f, pp, sp)
                    if verbose: print "missing: %s" % sp
                    res = 1
        if found == 0:
           if keeplists != None:
               misslist.write(f+"\n")
           num_undeclared_at_dest += 1
           if f in fnameset:
               num_present_undeclared_at_dest += 1
        if len(spl) == 0:
           num_no_locations += 1
           if verbose: print "file %s has 0 locations" % f
        
    print "Dataset ", ds.name, "at location", dest, ":"
    print "               Total Files:", num_in_dataset 
    print "      Present and declared:", num_present_declared_at_dest
    print "                  Declared:", num_declared_at_dest
    print "              Not Declared:", num_undeclared_at_dest
    print "  Present but not Declared:", num_present_undeclared_at_dest
    print " Present at wrong location:", num_present_wrong_loc
    print "    Files with no location:", num_no_locations
    if keeplists != None:
        flistf.close()
        loclist.close()
        misslist.close()
    return res

if __name__ == '__main__':
    
    log_startup()

    experiment = os.environ.get('EXPERIMENT',os.environ.get('SAM_EXPERIMENT',grp.getgrgid(os.getgid())[0]))

    parser = optparse.OptionParser(usage="usage: %prog [options] --name dataset --dest location\n Audit all files at destination location to see what files are and are not in named dataset")
    parser.add_option('-v','--verbose',   action='count')
    parser.add_option('-d','--dest',   help="location to audit")
    parser.add_option('-e','--experiment', default=experiment, help='use this experiment server defaults to $SAM_EXPERIMENT if not set')
    parser.add_option('-k','--keeplists', help="keep file lists in directory KEEPLISTS",default=None)
    parser.add_option('-n', '--name',     help="dataset name to audit", )

    (o,a) = parser.parse_args()

    if o.experiment:
        os.environ['EXPERIMENT']= o.experiment
        os.environ['SAM_EXPERIMENT']= o.experiment
        os.environ['IFDH_BASE_URI'] = "http://samweb.fnal.gov:8480/sam/%s/api" % o.experiment
    else: 
        sys.stderr.write("Error: Need either --experiment or $EXPERIMENT $SAM_EXPERIMENT in environment")
        os.exit(1)

    cert = get_standard_certificate_path(o)
    os.environ['X509_USER_PROXY'] = cert

    if not o.name:
        parser.error("expected --name dataset-name")
        exit(1)

    if not o.dest:
        parser.error("expected --dest path")
        exit(1)

    res = audit(dataset(o.name), dest = o.dest, verbose = o.verbose , experiment = o.experiment, keeplists= o.keeplists)
    if res == 0:
        log_finish("Success")
    else:
        log_finish("Fail")

    sys.exit(res)
