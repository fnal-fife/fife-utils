#!/usr/bin/env python3


from samweb_client.exceptions import *
from samweb_client import *
from fife_sam_utils import *
import sys
import os
import grp
import optparse


def report_stage_status(ds, locality, tapes):
    print("         Staging status for: %s" % ds.dims)
    print("                Total Files: %d" % len(ds.flist))
    print("              Tapes spanned: %d" % len(tapes))
    print(
        "      Percent files on disk: %d%%"
        % (
            (locality.get("ONLINE", 0) + locality.get("ONLINE_AND_NEARLINE", 0))
            * 100
            / len(ds.flist)
        )
    )
    ons = locality.get("ONLINE_AND_NEARLINE_size", 0)
    os = locality.get("ONLINE_size", 0)
    ns = locality.get("NEARLINE_size", 0)
    ts = ons + os + ns
    if ts != 0:
        print("Percent bytes online DCache: %d%%" % ((ons + os) * 100 / ts))

    else:
        print("Percent bytes on disk: unknown")


if __name__ == "__main__":

    log_startup()

    experiment = os.environ.get(
        "EXPERIMENT", os.environ.get("SAM_EXPERIMENT", safe_getgrgid(os.getgid())[0])
    )

    parser = optparse.OptionParser(
        usage="usage: %prog [options] dataset [dataset ...] \n make sure files in dataset actually exist"
    )
    parser.add_option("-v", "--verbose", action="count", default=0)
    parser.add_option(
        "-j",
        "--just_say",
        action="store_true",
        help="do not actually copy, just say what you would do",
    )
    parser.add_option(
        "-p", "--prune", action="store_true", help="prune locations we cannot reach"
    )
    parser.add_option(
        "-e",
        "--experiment",
        default=experiment,
        help="use this experiment server defaults to $SAM_EXPERIMENT if not set",
    )
    parser.add_option("-n", "--name","--did",  help="dataset name to validate")
    parser.add_option("-f", "--file", help="single file to validate")
    parser.add_option(
        "-l",
        "--locality",
        action="store_true",
        help="check DCache locations to see what is staged",
        default=False,
    )
    parser.add_option(
        "-L",
        "--listtapes",
        action="store_true",
        help="list what tapes SAM thinks files are on",
        default=False,
    )
    parser.add_option(
        "-T",
        "--tapeloc",
        action="store_true",
        help="check DCache locations to see what tapes things are on",
        default=False,
    )
    parser.add_option(
        "--location", help="only check matching locations", action="append", default=[]
    )
    parser.add_option(
        "--stage_status",
        help="generate staging status report",
        action="store_true",
        default=False,
    )

    (o, a) = parser.parse_args()

    if sys.argv[0].find("stage_status") > 0:
        o.stage_status = True
        if not o.location:
            o.location.append("/pnfs/")

    if o.verbose > 1:
        logging.basicConfig(level=logging.DEBUG)
    elif o.verbose > 0:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.disable(logging.INFO)

    logging.debug('options %s' % repr(o))

    if o.experiment:
        os.environ["EXPERIMENT"] = o.experiment
        os.environ["SAM_EXPERIMENT"] = o.experiment
        os.environ["IFDH_BASE_URI"] = (
            "http://sam%s.fnal.gov:8480/sam/%s/api" % 
               (o.experiment, o.experiment)
        ).replace("samsamdev","samdev")
    else:
        sys.stderr.write(
            "Error: Need either --experiment or $EXPERIMENT $SAM_EXPERIMENT in environment"
        )
        sys.exit(1)

    cert = get_standard_certificate_path(o)
    os.environ["X509_USER_PROXY"] = cert

    if not o.name and not o.file:
        parser.error("expected --name dataset-name or --file filename")
        exit(1)

    print("here:")
    # pick right dataset class to work through.
    if o.name and sys.argv[0].find("metacat_") >= 0:
        print("metacat case:")
        ds = dataset_metacat_dd(o.name)

    elif o.name:
        ds = dataset(o.name)

    # fake_file_dataset doesn't care metacat vs sam...
    elif o.file:
        ds = fake_file_dataset(o.file)

    else:
        sys.stderr.write("Error: need --did, --name or --file.")
        sys.exit(1)

    if (o.locality or o.stage_status) and not os.access(
        "/pnfs/%s" % o.experiment, os.O_RDONLY
    ):
        sys.stderr.write(
            "Notice: cannot do locality checks here: /pnfs/%s not visible\n"
            % o.experiment
        )
        o.locality = False
        o.stage_status = False

    if (o.tapeloc or o.stage_status) and not os.access(
        "/pnfs/%s" % o.experiment, os.O_RDONLY
    ):
        sys.stderr.write(
            "Notice: cannot do tape label checks here: /pnfs/%s not visible\n"
            % o.experiment
        )
        o.tapeloc = False
        o.stage_status = False

    locality = None
    if o.locality or o.stage_status:
        locality = {}
        locality["ONLINE"] = 0

    listtapes = None
    if o.listtapes or o.stage_status:
        listtapes = set()

    res = validate(
        ds,
        just_say=o.just_say,
        prune=o.prune,
        verbose=o.verbose,
        experiment=o.experiment,
        locality=locality,
        list_tapes=listtapes,
        tapeloc=o.tapeloc,
        location=o.location,
    )

    if o.stage_status:
        report_stage_status(ds, locality, listtapes)

    if o.locality:
        print("locality counts:")
        for k in list(locality.keys()):
            print("%s: %d" % (k, locality[k]))

    if o.listtapes:
        print("tapes:")
        for t in listtapes:
            print(t)

    if 0 == res:
        log_finish("Success")
    else:
        log_finish("Fail")

    sys.exit(res)
