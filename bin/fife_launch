#!/usr/bin/env python

import ConfigParser
import sys
import os
import optparse
import urllib
import shutil
try:
    import poms_client
except:
    pass

class launcher:
 
    def __init__(self, cfgfilename, overrides, jobname = None, stages = [], fake=None ):
	self.cfg = ConfigParser.SafeConfigParser()
        self.stages = stages
        self.cfg.optionxform = str
        self.included = {}
        self.fake = fake
        self.jobname = jobname
        self.searchpath = os.environ.get("FIFE_LAUNCH_PATH","").split(":")
 
        # now pull in the config file with includes
        self.do_cfg_includes(cfgfilename)

        # handle stage overrides up front
        for stage in stages:
            stagetag = 'stage_' + stage
            if self.cfg.has_section(stagetag):
                for k,v in self.cfg.items(stagetag, raw=1):
                    s,n = k.split('.',1)
                    self.cfg.set(s,n,v)
               
        # then command line overrides last
        if overrides:
	    for o in overrides:
		#print "o is", o
		k, v = o.split('=',1)
		s,n = k.split('.',1)
		self.cfg.set(s,n,v)

     
    def cfg_get(self, section, name, vars={}):
        ''' like cfg.get() except it gives None and not an exception '''
        try:
            res = self.cfg.get(section, name, vars=vars)
        except:
            res = None
        return res

    def do_cfg_includes(self, cffile):
        #print "do_cfg_includes:" , cffile
        for d in self.searchpath:
            if os.path.exists("%s/%s" % (d,cffile)):
                cffile = "%s/%s" % (d,cffile)
                break
        if self.included.get(cffile, None):
            return
        self.included[cffile] = 1
        self.cfg.read(cffile)
        if self.cfg.has_option('global','includes'):
            cfls = self.cfg.get('global', 'includes')
            for cf in cfls.split(" "): 
                if cf: 
                     self.do_cfg_includes(cf)
        print "after includes: ", self.cfg.items('global')

    def pre_launch(self, dry_run = False):
        dest = self.cfg_get('job_output','dest', vars= self.cfg_globals)
        if dest and not dest.find('$') >= 0:
            if dry_run:
                print("I would: ifdh mkdir_p %s" % dest)
            else:
                import ifdh
                ih = ifdh.ifdh()
                ih.mkdir_p(dest)

        dataset = self.cfg_get('submit','dataset',vars = self.cfg_globals)
        if dataset:
            if dry_run:
                print("I would: samweb count_definition_files %s" % dataset)
                print("and make sure its non-zero...")
            else:
                experiment = self.cfg_get('submit','G', vars = self.cfg_globals)
                samweb = SAMWebClient(experiment = experiment)
                n = samweb.countFiles(defname = dataset)
                if n == 0:
                     print("Ignoring launch request on empty dataset")
                     os.exit(1)

    def launch(self, dry_run = False):
        cmd = self.build_launch()
        if dry_run:
            print("Pre-launch checks:")
            self.pre_launch(dry_run = True)
            print("Then I would run: \n-----\n%s\n-----" % cmd)
            print("... which would, in the job, do:\n-----")
            # trim down to command and args from jobsub line
            cmd = cmd[cmd.find("file://")+8:]
            cmd = cmd.replace(" "," --dry_run ",1)
            os.system(cmd)
            print("-----")
        else:
            self.pre_launch()
            print( "running:\n %s" , cmd)
	    os.system(cmd)

    def build_launch(self):
	res = []
	self.cfg_globals = dict(self.cfg.items('global'))

        res.append("set -x")

        #
        # if we are doing our own POMS stuff, hide poms_jobsub_wrapper's 
        # version of jobsub_submit, by pushing jobsub_client's bin
        # back on the front of the path.
        #
	if self.cfg.has_section("poms_get_task_id"):
            res.append( "PATH=$JOBSUB_CLIENT_DIR:$PATH")

	res.append( "GROUP=%s; export GROUP" % self.cfg_get('global','group', vars = self.cfg_globals))

	#for k,v in self.cfg.items("env_pass", raw = 1):
	#    v = self.cfg_get("env_pass",k,vars = self.cfg_globals)
	#    res.append("%s='%s'; export %s" % (k, v, k))

	if self.cfg.has_section("submit"):

            if self.fake:
	        res.append("fake_jobsub \\")
            else:
	        res.append("jobsub_submit \\")

	    for k,v in self.cfg.items("env_pass", raw = 1):
		v = self.cfg_get("env_pass",k,vars = self.cfg_globals)
		res.append( "  -e %s='%s' \\" % (k,v) )

            if self.cfg.has_section("poms_campaign_layer"):
                #
                # do the full poms_client game:
                # -- register the campaign
                # -- request a task_id
                #
                campaign_kwargs = {}
                for k,v in self.cfg.items("poms_campaign_layer", raw = 1):
	 	     v = self.cfg_get("poms_campaign_layer",k,vars = self.cfg_globals)
                     campaign_kwargs[k] = v

                campaign_id = poms_client.register_poms_campaign(**campaign_kwargs)
                poms_get_id_kwargs = {'campaign': campaign_id }
            else:
                poms_get_id_kwargs = {}
                

	    for k,v in self.cfg.items("submit", raw = 1):
		v = self.cfg_get("submit",k,vars = self.cfg_globals)
                if len(k) > 2 and k[-2] == '_' and k[-1] in "0123456789":
                     k = k[:-2]
                if len(k) == 1:
		    res.append("  -%s '%s'  \\" %( k,v))
		elif v == 'True' or v == True:
		    res.append("  --%s \\" % k)
		elif v == 'False' or v == False or v == None:
                    pass
		else:
		    res.append("  --%s='%s'  \\" %( k,v))

            wrapfile = os.path.expandvars(self.cfg.get('global','wrapper',vars = self.cfg_globals))
            if wrapfile.startswith("file:///"):
                wrapfile=wrapfile[7:]

            if self.jobname != None:
                jobwrapfile = "/tmp/%s_%d" % (jobname, getpid())
                shutil.copy(wrapfile, jobfile)
            else:  
	        jobwrapfile = wrapfile

	    res.append("  file://%s \\" % jobwrapfile)

	    for k,v in self.cfg.items("job_setup", raw=1):
		v = self.cfg_get("job_setup",k,vars = self.cfg_globals)
                if len(k) > 2 and k[-2] == '_' and k[-1] in "0123456789":
                     k = k[:-2]
		if v == 'True' or v == True:
		    res.append("    --%s \\" % k)   
		elif v == 'False' or v == False or v == None:
		    pass
		else:
                    if k in ['export','source','setup','prescript','postscript'] and urllib.quote(v) != v:
                         k = '%s-unquote' % k
                         v = urllib.quote(v)
		    res.append("    --%s '%s' \\" % (k,v))   

   
	    for k,v in self.cfg.items("sam_consumer", raw=1):
		v = self.cfg_get("sam_consumer",k,vars = self.cfg_globals)
		if v == 'True' or v == True:
		    res.append("  --%s \\" % k)
		elif v == 'False' or v == False or v == None:
                    pass
                else:
		    res.append("    --%s '%s' \\" % (k,v))   

	    for k,v in self.cfg.items("job_output", raw=1):
		v = self.cfg_get("job_output",k,vars = self.cfg_globals)
		if v == 'True' or v == True:
		    res.append("    --%s \\" % k)   
		elif v == 'False' or v == False or v == None:
		    pass
                else:
		    res.append("    --%s '%s' \\" % (k,v))

	    res.append("  --exe  %s \\" % self.cfg_get('executable','name', vars = self.cfg_globals))

            res.append(" -- \\") # end options to wrapper

	    for k,v in self.cfg.items("executable", raw=1):
		v = self.cfg_get("executable",k,vars = self.cfg_globals)
		if k.startswith('arg_'):
		    res.append("      %s \\" % v)


            if self.cfg.has_section("poms_get_task_id"):

                if os.environ.get("POMS_TEST","") != "":
                    poms_get_id_kwargs['test'] = os.environ["POMS_TEST"]

                if os.environ.get("POMS_PARENT_TASK_ID","") != "":
                    poms_get_id_kwargs['parent_task_id'] = os.environ["POMS_PARENT_TASK_ID"]
                poms_get_id_kwargs['command_executed'] = '\n'.join(res)

                for k,v in self.cfg.items("poms_get_task_id", raw = 1):
		    v = self.cfg_get("poms_get_task_id",k,vars = self.cfg_globals)
                    poms_get_id_kwargs[k] = v

                #
                # looks redundant, allows override from config file
                # or value from register_poms_campaign
                #
                campaign_id = poms_get_id_kwargs['campaign']

                task_id = poms_client.get_task_id_for(**poms_get_id_kwargs)

                n = res.index("jobsub_submit \\") + 1
                
                res.insert(n,' -e POMS_CAMPAIGN_ID=%s \\' % campaign_id)
                res.insert(n,' -e POMS_TASK_ID=%s \\' % task_id)
                res.insert(n,''' -l "+FIFE_CATEGORIES='\\"POMS_TASK_ID_%s,POMS_CAMPAIGN_ID_%s,%s\\"'"  \\''' % (
			task_id, campaign_id, os.environ.get("POMS_CAMPAIGN_TAGS","")
                   ))
                res.insert(n,' -l "+POMS_TASK_ID=%s"  \\' % task_id)
                res.insert(n,' -l "+POMS_CAMPAIGN_ID=%s"  \\' % campaign_id)

	    res.append("")

            if self.jobname != None:
                res.append("rm %s" % jobwrapfile)

	elif self.cfg.has_section("submit_dag"):
	    # XXX not doing dags -- yet
            print "submit_dag not yet implemented..."
	    pass
	else:
	    raise KeyError("Need [submit] or [submit_dag] sections...")


	return "\n".join(res)

if __name__ == '__main__':
    p = optparse.OptionParser(description='launch a job with parameters'
,
                            prog='fife_launch',
                            version='1.1',
                            usage='%prog --config file.cfg --override foo.bar=10')


    p.add_option('-c', '--config', help='config file describing job')
    p.add_option('-O', '--override',  help='override config file values', action='append' )
    p.add_option('--jobname', help='job name for launching', default=None)
    p.add_option('--stage', action='append', help='stage name to add options from', default=[])
    p.add_option('--fake', action='store_true', help='use fake_jobsub', default=None)
    p.add_option('--dry_run', action='store_true', help='Just print what we would do', default=None)
    options, args = p.parse_args()
   
    l = launcher(options.config, options.override, options.jobname, options.stage, options.fake)
    l.launch(options.dry_run)
