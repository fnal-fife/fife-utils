#!/usr/bin/env python

import ConfigParser
import sys
import os
import optparse
import urllib

class launcher:
 
    def __init__(self, cfgfilename, overrides ):
	self.cfg = ConfigParser.SafeConfigParser()
        self.cfg.optionxform = str
	self.cfg.read(cfgfilename)
        if overrides:
	    for o in overrides:
		print "o is", o
		k, v = o.split('=',1)
		s,n = k.split('.',1)
		self.cfg.set(s,n,v)

    def launch(self):
        cmd = self.build_launch()
        print "running:\n " , cmd
	os.system(cmd)

    def build_launch(self):
	res = []
	globals = dict(self.cfg.items('global'))

        res.append("set -x")

	res.append( "GROUP=%s; export GROUP" % self.cfg.get('global','group', vars = globals))

	#for k,v in self.cfg.items("env_pass", raw = 1):
	#    v = self.cfg.get("env_pass",k,vars = globals)
	#    res.append("%s='%s'; export %s" % (k, v, k))

	if self.cfg.has_section("submit"):

	    res.append("jobsub_submit \\")

	    for k,v in self.cfg.items("env_pass", raw = 1):
		v = self.cfg.get("env_pass",k,vars = globals)
		res.append( "  -e %s='%s' \\" % (k,v) )

	    for k,v in self.cfg.items("submit", raw = 1):
		v = self.cfg.get("submit",k,vars = globals)
                if len(k) == 1:
		    res.append("  -%s '%s'  \\" %( k,v))
		elif v == 'True':
		    res.append("  --%s \\" % k)
		else:
		    res.append("  --%s='%s'  \\" %( k,v))

	    res.append("  %s \\" % os.path.expandvars(self.cfg.get('global','wrapper',vars = globals)))

	    for k,v in self.cfg.items("job_setup", raw=1):
		v = self.cfg.get("job_setup",k,vars = globals)
		if v == 'True':
		    res.append("    --%s \\" % k)   
		else:
		    if k[-2] == '_' and k[-1] in "0123456789":
			 k = k[:-2]
                    if k == 'export' and urllib.quote(v) != v:
                         k = 'export-unquote'
                         v = urllib.quote(v)
		    res.append("    --%s '%s' \\" % (k,v))   

	    for k,v in self.cfg.items("job_output", raw=1):
		v = self.cfg.get("job_output",k,vars = globals)
		res.append("    --%s '%s' \\" % (k,v))
   
	    for k,v in self.cfg.items("sam_consumer", raw=1):
		v = self.cfg.get("sam_consumer",k,vars = globals)
		res.append("    --%s '%s' \\" % (k,v))   

	    res.append("  --exe  %s \\" % self.cfg.get('executable','name', vars = globals))
	    for k,v in self.cfg.items("executable", raw=1):
		v = self.cfg.get("executable",k,vars = globals)
		if k.startswith('arg_'):
		    res.append("      %s \\" % v)

            res.append("")

	elif self.cfg.has_section("submit_dag"):
	    # XXX not doing dags -- yet
            print "submit_dag not yet implemented..."
	    pass
	else:
	    raise KeyError("Need [submit] or [submit_dag] sections...")

	return "\n".join(res)

if __name__ == '__main__':
    p = optparse.OptionParser(description='launch a job with parameters'
,
                            prog='fife_launch',
                            version='0.9',
                            usage='%prog --config file.cfg --override foo.bar=10')


    p.add_option('-c', '--config', help='config file describing job')
    p.add_option('-O', '--override',  help='override config file values', action='append' )

    options, args = p.parse_args()
   
    l = launcher(options.config, options.override)
    l.launch()
