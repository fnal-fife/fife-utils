#!/usr/bin/env python

import os
import sys
import ifdh
import optparse
import grp
import hashlib
import traceback
import signal

class batch_copier:
    def __init__(self):
        self.workdir="%s/ifdh_batch_copy_%d" % (os.environ.get("TMPDIR","/var/tmp") , os.getpid())
        os.mkdir(self.workdir)
        self.ih = ifdh.ifdh()

    def do_batch(self, src, dest, nocheck=False, justsay=False, intermed=False, hashes=False, ncopies=1, checklist=None):
        ncopies = int(ncopies)
        if nocheck:
            dest_files = set([])
        elif checklist:
            f = open(checklist,"r")
            dest_files = f.readlines()
            dest_files = map(lambda x: x.strip() ,dest_files)
            dest_files = set(dest_files)
        else:
            dest_files = self.ih.ls(dest, 10,"")
            dest_files = map(os.path.basename, dest_files)
            dest_files = set(dest_files)

        firstlist = self.ih.ls(src, 10, '')

        #
        # copy the initial list, getting list of files to redo, then
        # try the redo ones again... (go for three strikes?)
        #
        redo = self.dofiles(firstlist ,dest, dest_files, nocheck = nocheck, justsay = justsay, intermed = intermed, hashes=hashes, ncopies=ncopies)

        redo = self.dofiles(redo ,dest, dest_files, nocheck = nocheck, justsay = justsay, intermed = intermed, hashes=hashes, ncopies=ncopies)

        redo = self.dofiles(redo ,dest, dest_files, nocheck = nocheck, justsay = justsay, intermed = intermed, hashes=hashes, ncopies=ncopies)


    def dofiles(self, srcfilelist, dest, dest_files,  nocheck=False, justsay=False, intermed=False, hashes=False, ncopies=1):
        bgcount = 0
        bgprocs = {}
        redo = []
        for srcfile in srcfilelist:
            if srcfile[-1] == '/':
                continue
        
            bfile = os.path.basename(srcfile)

            if bfile in dest_files:
                continue

            ifile = "%s/%s" % (self.workdir, bfile)
            if hashes:
                d = hashlib.md5(bfile).hexdigest()
                hashpath = "/%c/%c/%c" % (d[0], d[1], d[2])
            else:
                hashpath = ''
         
	    r = os.fork()
	    if (r == 0):
               try:
		   # we're the child, do the copy
                   #
                   # give ourselves 15 minutes, maximum
                   signal.alarm(15*60)
		   if justsay:
                      if intermed:
                          via = " via " + ifile
                      else:
                          via = ""

		      print "ifdh_batch_copy: I would copy %s to %s%s/%s %s" % (srcfile, dest, hashpath, bfile, via)
		      res = 0
		   else:
		       print "ifdh_batch_copy: Starting copy of ", bfile
                       sys.stdout.flush()
		       self.ih = ifdh.ifdh()
                       if hashes:
		           self.ih.mkdir_p("%s%s"%( dest, hashpath))
		       if intermed:
                           # until we fix ifdh to not always use ->
                           if srcfile.startswith("s3://"):
                              os.system("aws s3 cp --quiet %s %s || aws s3 cp --quiet %s %s" % (srcfile, ifile, srcfile, ifile))
                           else:
			      self.ih.cp([srcfile, ifile])
			   res = self.ih.cp([ifile, "%s%s/%s"%(dest,hashpath,bfile)])
			   os.unlink(ifile)
		       else:
			   res = self.ih.cp([srcfile, "%s%s/%s"%(dest,hashpath,bfile)])
               except:
                  print "ifdh_batch_copy: Exception in copy..."
                  traceback.print_exc(file=sys.stdout)
	          sys.stdout.flush()
                  exit(1)

               exit(res)

	    elif (r > 0):
               bgprocs[r] = srcfile
	    else:
	       print "ifdh_batch_copy: Ouch: fork failed!"
	       sys.stdout.flush()

            bgcount = bgcount + 1

	    if (bgcount >= ncopies):
	       pid,status = os.wait()
	       bgcount = bgcount - 1
               if os.WIFEXITED(status) and os.WEXITSTATUS(status) == 0:
		   print "ifdh_batch_copy: Finished %s" % bgprocs[pid]
	           sys.stdout.flush()
	       else:
		   print "ifdh_batch_copy: Failed %s" % bgprocs[pid]
	           sys.stdout.flush()
                   redo.append(bgprocs[pid])
               del bgprocs[pid]

        while (bgcount > 0):
            pid, status = os.wait()
	    bgcount = bgcount - 1
            if os.WIFEXITED(status) and os.WEXITSTATUS(status) == 0:
	        print "ifdh_batch_copy: Finished %s" % bgprocs[pid]
	        sys.stdout.flush()
            else:
	        print "ifdh_batch_copy: Failed %s" % bgprocs[pid]
	        sys.stdout.flush()
                redo.append(bgprocs[pid])
            del bgprocs[pid]

        return redo

if __name__=='__main__':
    parser = optparse.OptionParser(description='bulkd copy files from src to dest',
                            prog='sam_add_dataset',
                            version='sam_add_dataset 0.9',
                            usage='%prog <-f file | -d directory> [options]')


    parser.add_option('-s', '--src',     help="source for copy", )
    parser.add_option('-d', '--dest',    help="destination for copy", )
    parser.add_option('-e','--experiment')
    parser.add_option('-j','--justsay',  action='store_true', help="do not actually copy, just say what you would do", default=False)
    parser.add_option('-N','--ncopies',   help="number of copies to run in parallel", default=1)
    parser.add_option('-n','--nocheck',  action='store_true', help="do not get listing of destination to check for existing files", default=False)
    parser.add_option('--checklist',  help="premade list  of previously copied files")
    parser.add_option('-i','--intermed',  action='store_true', help="Copy via an intermediate file", default=False)
    parser.add_option('--hashes',  action='store_true', help="Copy via an intermediate file", default=False)
    parser.add_option('-v','--verbose',   action='count')
    
    (o,a) = parser.parse_args()

    if not o.experiment:
        o.experiment = os.environ.get('EXPERIMENT',os.environ.get('SAM_EXPERIMENT',grp.getgrgid(os.getgid())[0]))

    if o.experiment:

        os.environ['EXPERIMENT']= o.experiment
        os.environ['SAM_EXPERIMENT']= o.experiment
        os.environ['IFDH_BASE_URI'] = "http://samweb.fnal.gov:8480/sam/%s/api" % o.experiment

    bc = batch_copier()
    
    bc.do_batch(o.src, o.dest, nocheck = o.nocheck, justsay = o.justsay, intermed=o.intermed, hashes=o.hashes, ncopies = o.ncopies, checklist = o.checklist)
